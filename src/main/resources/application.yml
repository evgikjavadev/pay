server:
  port: 8080

#Количество заявок в поиске
findSizeApplication: 1

sleep-task-payment: 10000
sleep-task-status: 10000

spring:
  application:
    name: rfrm-pay
    version: @project.version@

  security:
    oauth2:
      client:
        registration:
          epa-tyk-client:
            provider: epa-tyk-client
            client-id: ${TUS_EPA}
            client-secret: ${TUS_PASSW_EPA}
            authorization-grant-type: client_credentials
        provider:
          epa-tyk-client:
            token-uri: ${EPA_AM_URL}/passport/oauth2/token
  datasource:
    hikari:
      driverClassName: org.postgresql.Driver
      jdbc-url: jdbc:postgresql://${DB_URL}:5432/${DB_NAME}?currentSchema=rfrm_pay
      username: ${DB_USER}
      password: ${DB_PASS}
  jmx:
    default-domain: some
  codec:
    max-in-memory-size: 5MB

  liquibase:
    enabled: false

#Трассировка
ru:
  vtb:
    tstr:
      client-starter:
        enabled: ${TRACING_MODE:true}
      kafka:
        bootstrap-servers: ${TRACE_KAFKA_SERVER}

opentracing:
  jaeger:
    enabled: true
    log-spans: true
    service-name: RFRM.rfrm-pay

#Аудит
audit:
  local-mode: ${AUDIT_LOCAL_MODE:false}
  enabled: ${AUDIT_ON:false}
  kafka:
    bootstrap:
      server: ${AUDIT_KAFKA_SERVER}
    consumer:
      group-id: audit-management
    topic: audit
    ssl:
      enabled: true
      truststore:
        # для запуска из idea
        location: ${PATH_TRUSTSTORE_PAY}
        password: ${STORE_PASSWORD_PAY}
      keystore:
        # для запуска из idea
        location: ${PATH_KEYSTORE_PAY}
        password: ${STORE_PASSWORD_PAY}
      key:
        password: ${STORE_PASSWORD_PAY}
      truststore-type: 'JKS'
      keystore-type: 'JKS'
  default-resolver:
    sub: sub_from_kafka
    channel: channel_from_kafka
  consumer:
    initial-poll:
      time: 1000

ms.properties.infoSystemCode: ${SYSTEM_RIS_CODE}
ms.properties.infoSystemId: ${SYSTEM_RIS_ID}

management:
  metrics:
    tags:
      appName:  @project.build.finalName@
      appVersion:  @project.version@
  endpoints:
    enabled-by-default: true
    web.exposure.include: health,prometheus,metrics,info
  endpoint:
    health:
      enabled: true
      show-details: always
      probes:
        group:
          readiness:
            include: db
    shutdown.enabled: true
    restart.enabled: true
    prometheus.enabled: true
    logfile.enabled: true

logging:
  level:
    ROOT: INFO
    ru.vtb.omni: INFO
    ru.vtb.omni.ac: ${LOG_LEVEL:DEBUG}
    ru.vtb.msa: ${LOG_LEVEL:DEBUG}
    org.apache.http: INFO
    ru.vtb.omni.audit: ${LOG_LEVEL:INFO}
    ru.vtb.msa.partner: ${LOG_LEVEL:DEBUG}
    ru.vtb.msa.rfrm.integration: ${LOG_LEVEL:DEBUG}
    ru.vtb.msa.mdclogging: ${LOG_LEVEL:DEBUG}

product-profile-fl-accounts:
  url: ${EPA_IG_URL:http://rfrm-wiremock.oslb-dev01.corp.dev.vtb/bsc-wire-mock}
  resource:  ${GET_RESOURCE:/portfolio/portfolio-agregator/portfolio/active}
  headers:
    X-INITIATOR-SERVICE: rfrm-pay
  retry:
    count: 3
    duration: 2000

pay:
  kafka:
    enable: ${PROCES_PALTF_ENABLE_PAY:false}
    bootstrap:
      server: ${PROCES_PALTF_KAFKA_SERVER_PAY}
    consumer:
      group-id: pay
    topic:
      rfrm_core_payment_order: ${RFRM_CORE_PAYMENT_ORDER}
      rfrm_pay_result_reward: ${RFRM_PAY_RESULT_REWARD}
    max.poll.records: 500
    listener:
      poll-timeout: 1000
    ssl:
      enabled: true
      truststore:
        # для запуска из idea
        location: ${PATH_TRUSTSTORE_PAY}
        password: ${STORE_PASSWORD_PAY}
      keystore:
        # для запуска из idea
        location: ${PATH_KEYSTORE_PAY}
        password: ${STORE_PASSWORD_PAY}
      key:
        password: ${STORE_PASSWORD_PAY}
      truststore-type: 'JKS'
      keystore-type: 'JKS'

function:
  kafka:
    enable: ${FUNCTION_ENABLE:false}
    #Интервал черезготорый кафкаоткоючит consumer и начент пере балансировку
    max.poll.interval.ms: ${FUNCTION_MAX_POLL_INTERVAL:300000}
    #паузара в работе consumer влиает на max.poll.interval = max.poll.interval + pause.work.consumer
    pause.work.consumer.ms: ${FUNCTION_PAUSE_WORK_CONSUMER:0}
    bootstrap:
      server: ${PROCES_PALTF_KAFKA_SERVER_PAY}
    consumer:
      group-id: pay
      group-id-res: function-pay-result
    topic:
      rfrm_pay_function_result_reward: ${RFRM_PAY_FUNCTION_RESULT_REWARD:rfrm_pay_function_result_reward}
      rfrm_pay_function_status_update_reward: ${RFRM_PAY_DUNCTION_STATUS_UPDATE_REWARD:rfrm_pay_function_status_update_reward}
    ssl:
      enabled: true
      truststore:
        # для запуска из idea
        location: ${PATH_TRUSTSTORE_PAY}
        password: ${STORE_PASSWORD_PAY}
      keystore:
        # для запуска из idea
        location: ${PATH_KEYSTORE_PAY}
        password: ${STORE_PASSWORD_PAY}
      key:
        password: ${STORE_PASSWORD_PAY}
      truststore-type: 'JKS'
      keystore-type: 'JKS'

# настройки для кафки топика core -> pay, взято из Core
core:
  kafka:
    enable: ${PAY_ENABLE:true}
    max.poll.records: 1
    bootstrap:
      server: ${PROCES_PALTF_KAFKA_SERVER_PAY}
    consumer:
      group-id-core: pay-core
    topic: ${PAY_TOPIC:rfrm_core_payment_order}
    ssl:
      enabled: true
      truststore:
        location: ${PATH_TRUSTSTORE}
        password: ${STORE_PASSWORD}
      keystore:
        location: ${PATH_KEYSTORE}
        password: ${STORE_PASSWORD}
      key:
        password: ${STORE_PASSWORD}
      truststore-type: 'JKS'
      keystore-type: 'JKS'